#!/bin/sh

set -e

base=docker.io/tpimenta

atexit() {
	local ec=$?
	if [ -n "$tmp" -a -e "$tmp" ]; then
		rm -rf "$tmp"
	fi
	docker images -q -fdangling=true | xargs -r docker rmi
	exit $ec
}

trap atexit EXIT INT TERM

dir=$(dirname "$0")
fulldir=$(readlink -f "$dir")
image=$(basename "$fulldir")

if [ "$image" = .common ]; then
	printf 'Please run some image!\n' >&2
	exit 1
fi

cache="$(dirname "$fulldir")/.cache"
data="$cache/$image"
uid=$(id -u)
gid=$(id -g)

alpine=latest

if [ ! -d "$data" ]; then
	mkdir -p "$data"
fi

date=$(date +%F)
last=
if [ -s "$cache/alpine" ]; then
	read -r alpine < "$cache/alpine"
	last=$(date -r "$cache/alpine" +%F)
fi

# https://registry.hub.docker.com/v2/repositories/library/alpine/tags/
# https://registry.hub.docker.com/v1/repositories/alpine/tags

if [ "$date" != "$last" ]; then
	docker \
		run \
		--rm \
		-i \
		-v "$cache:/data" \
		--user "$uid:$gid" \
		"alpine:$alpine" \
		sh -se <<\EOF
wget -qO- 'https://registry.hub.docker.com/v1/repositories/alpine/tags' |
	sed -r 's/\s*\[?\s*\{[^}]*"name"\s*:\s*"([^"]*)"[^}]*\}\s*[],]?\s*/\1\n/g' |
	awk -F. '
int($1) == $1 && length($1) < 8 {
	n = split(version, arr, /\./)
	ok = 0
	m = n
	if (m < NF) {
		m = NF
	}
	for (i = 1; i <= m && ok == 0; i++) {
		v0 = 0
		if (i <= n) {
			v0 = arr[i]
		}
		v1 = 0
		if (i <= m) {
			v1 = $i
		}
		if (v0 < v1) {
			ok = 1
		} else if (v0 > v1) {
			ok = -1
		}
	}
	if (ok > 0) {
		version = $0
	}
} END {
	print version
}
' > /data/alpine
EOF

	if [ -s "$cache/alpine" ]; then
		read -r alpine < "$cache/alpine"
	fi
fi

version=
if [ -s "$data/version" ]; then
	read -r version < "$data/version"
fi

md5=
if [ -s "$data/md5" ]; then
	read -r md5 < "$data/md5"
fi

newversion=
newmd5=

check() {
	docker \
		run \
		--rm \
		-i \
		-v "$data:/data" \
		--user "$uid:$gid" \
		"alpine:$alpine" \
		sh -se <<EOF
$(cat)

if [ -n "\$version" ]; then
	printf '%s\\n' "\$version" > /data/newversion
fi

if [ -n "\$md5" ]; then
	printf '%s\\n' "\$md5" > /data/newmd5
fi
EOF

	if [ -s "$data/newversion" ]; then
		read -r newversion < "$data/newversion"
	fi

	if [ -s "$data/newmd5" ]; then
		read -r newmd5 < "$data/newmd5"
	fi

	if [ -z "$newversion" -a -z "$newmd5" ]; then
		printf 'Unable to compute new version!\n' >&2
		exit 1
	fi

	if [ "$version" = "$newversion" -a "$md5" = "$newmd5" ]; then
		if [ -f "$data/newversion" ]; then
			unlink "$data/newversion"
		fi
		if [ -f "$data/newmd5" ]; then
			unlink "$data/newmd5"
		fi
		printf 'No update required!\n' >&2
		exit
	fi
}

prebuild() {
	:
}

build() {
	local remote="$base/$image:$newversion" latest="$base/$image:latest"

	tmp=$(mktemp -d)
	cat > "$tmp/Dockerfile"

	docker \
		build \
		--no-cache \
		--force-rm \
		--tag "$remote" \
		"$tmp"

	docker push "$remote"
	docker tag "$remote" "$latest"
	docker push "$latest"

	if [ -s "$data/newversion" ]; then
		mv "$data/newversion" "$data/version"
	fi

	if [ -s "$data/newmd5" ]; then
		mv "$data/newmd5" "$data/md5"
	fi
}
